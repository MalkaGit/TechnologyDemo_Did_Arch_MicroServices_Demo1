//lecture 11

goal:
	so far, the gateway accepted a command and publsihed  it to the service bus.
	now, the TestMessaging micro service will subscribe to that message  bus for that command 
    and handle it

=======================================================================================================
step0: define in X.Common the Command
=======================================================================================================
Done (bedore)       TestMessagingCommand.cs (we already hacve it there)




=======================================================================================================
step1 - Stetttings: 
        the subscriber  (micro service app) that wants to subscribe to the commmand,
        needs the "connection string" to (RabbitMq) message bus
=======================================================================================================
eg, X.TestMessaging.ApiApp


goal:
         appsettings.json file (in TestMessaging app) will hold rabbitmq section 
         these settings will be loaded into RabbitMqOptions.cs
         and sent to RawRabbit.BusClient so it knows how to connect to the (RabbitMq) message bus 


notes:
1.	    documentation
    	    open https://rawrabbit.readthedocs.io/	==> 
	        select vNext configuration file     that will open:		
            https://rawrabbit.readthedocs.io/en/master/configuration.html#vnext-configuration-file


Tasks:
    1. open https://rawrabbit.readthedocs.io/en/master/configuration.html#vnext-configuration-file
	   to find the json

    2. add to  appsettings.json asection:


    "rabbitmq": 
    {
        "Username":                 "guest",
        "Password":                 "guest",
        "VirtualHost":              "/",
        "Port":                     5672,
        "Hostnames":                [ "localhost" ],
        "RequestTimeout":           "00:00:10",
        "PublishConfirmTimeout":    "00:00:01",
        "RecoveryInterval":         "00:00:10",
        "PersistentDeliveryMode":   true,
        "AutoCloseConnection":      true,
        "AutomaticRecovery":        true,
        "TopologyRecovery":         true,
        "Exchange": 
        {
                "Durable":          true,
                "AutoDelete":       true,
                "Type":             "Topic"
        },
        "Queue": 
        {
                "AutoDelete":       true,
                "Durable":          true,
                "Exclusive":        true
        }
    },


=======================================================================================================
step2 - Settings
            the subscriber class needs an interface (eg, RawRabbit.IBusClient)
            to commmunicate with the bus  (Eg, RabbitMq)
=======================================================================================================

        eg, X.MS.TestMessagingpp.ApiApp will have a contrroller:   TestMessagingController 


        #region properties 

        /// <summary>
        /// interface for communicating with the (RabbitMq) message bus
        /// </summary>
        /// <remarks>
        /// 1   this is an instance of Rbabbit.IBusClient
        /// 2.  Startup.js calls the AddRabbitMq method to tell the IOC how to create the IBusClient.
        /// 3.  the IBusClient takes its settings from rabbitmq  section on appsettings.json
        /// </remarks>
        private readonly IBusClient _BusClient;

        #endregion





=======================================================================================================
step3 - Settings
         the subscriber  class will init the BusClient in its constuctor
         Note: IOC will call the constructor with an iinstance of RawRabbit.BusClient as RawRabbit.IBusClient

=======================================================================================================
eg, X.GateWay.ApiApp will have a contrroller:   TestMessagingController 

        /// <summary>
        /// IOC will send the IBusClient instance argummnent
        /// </summary>
        /// <param name="BusClient"></param>
        /// <remarks>
        /// 1.  Startup.js calls the AddRabbitMq method to tell the IOC how to create the IBusClient.
        /// </remarks>
        public TestMessagingController(IBusClient BusClient)
        {
            this._BusClient = BusClient;
        }

        #endregion 


=======================================================================================================
step4 - Sttings
        the subscriber app will init the IOC 
        to reutrn BusClient when  it is asdked for IBusClient
=======================================================================================================

    the StartUp.cs of the subsciber  app (TestMessaging app)


    StartUp.cs  of the subscriber app

            // This method gets called by the runtime. Use this method to add services to the container.
            public void ConfigureServices(IServiceCollection services)
            {
                ...

                services.AddRabbitMq(Configuration); //configure ocnnection to the service bus
                ....
            }
    
    


            note: earlier  we implemented the helper AddRabbbitMq



=======================================================================================================
step5 - Subscribing and handling command 
        subscriber (eg, MS.TsetMessaging.ApiApp) define the command handler 
        subscriber                              subscrbe to the bus to handle the commad
        
=======================================================================================================

5.1 define the command Handler
    the subscriber of the command handler (X.TestMessaging.Api.App)
    wil define the Handler 




    B.  define in the API GW: handler 
         public class ActivityCreatedHandler : IEventHandler<ActivityCreated>
         {
            public async Task HandleAsync(ActivityCreated @event)
            {
               //stupod
               awit Task.completedTask;z
                Console.WriteLine($"Activity created: {@event.Name}");
                //later on we migt add to repositry
            }

         }

        C.  init IOC : map the event to the event handler 
            in the GateWay, Startup.cs method public void ConfigureServices(IServiceCollection services)
            calls
                            services.AddScoped<IEventHandler<ActivityCreatedEvent>, ActivityCreatedHandler>();



        C.  subscribe to the bus  
            when the bus gets ActivityCreatedd event
            it will fire the activityCreaedEventHandler

            eg, in APIGW project, Programm.cs
            public static void Main(string[] args)
            {
                ServiceHost //fro common
                .Create<Startup>(args)
                .UseRabbitMq()  //our fluent api
                .SubscribeToEvent<ActivityCreatedEbent>()   //find the event handler an subscribe  
                .Build()
                .Run();
            }



            SubscribeToEvent - 
                    use IOC to find the envetn handler
                    then it tells the bus to nanlge the event usingthat handler

     




